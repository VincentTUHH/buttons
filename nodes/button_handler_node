#!/usr/bin/env python3

# Copyright (C) 2022-2023 Thies Lennart Alff

# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA

import asyncio

import rclpy
from buttons_msgs.msg import Button
from rclpy.callback_groups import MutuallyExclusiveCallbackGroup
from rclpy.executors import SingleThreadedExecutor
from rclpy.node import Node
from std_srvs.srv import SetBool, Trigger


class ButtonHandlerNode(Node):
    ARM_BUTTON = 0
    DISARM_BUTTON = 1
    REBOOT_FCU_BUTTON = 2
    RESTART_EKF2_BUTTON = 3

    def __init__(self, node_name: str):
        super().__init__(node_name)
        self.declare_parameter('use_manipulator', False)
        self.use_manipulator = self.get_parameter(
            'use_manipulator').get_parameter_value().bool_value
        if self.use_manipulator:
            self.get_logger().info('Manipulator will be used.')
        else:
            self.get_logger().info('Manipulator will NOT be used.')

        self._ok = False

        self.service_cb_group = MutuallyExclusiveCallbackGroup()
        self.message_cb_group = MutuallyExclusiveCallbackGroup()

        self.arming_client = self.create_client(
            SetBool, '/arm', callback_group=self.service_cb_group)
        self.manipulator_arming_client = self.create_client(
            SetBool, '/arm_manipulator', callback_group=self.service_cb_group)
        self.reboot_client = self.create_client(
            Trigger, '/fcu_reboot', callback_group=self.service_cb_group)
        self.restart_ekf2_client = self.create_client(
            Trigger, '/ekf2_restart', callback_group=self.service_cb_group)
        self.button_sub = self.create_subscription(
            Button,
            'button',
            self.on_button,
            10,
            callback_group=self.message_cb_group,
        )
        self._ok = True

    async def arm_vehicle(self, state: bool):
        srv_name = self.resolve_service_name(self.arming_client.srv_name)
        if not self.arming_client.wait_for_service(timeout_sec=0.5):
            self.get_logger().error(f'Service [{srv_name}] not available.')
            return
        self.get_logger().info(f'Service [{srv_name}] is available.')

        request = SetBool.Request()
        request.data = state

        future = self.arming_client.call_async(request)
        try:
            result: SetBool.Response = await asyncio.wait_for(future,
                                                              timeout=1.0)
        except Exception as e:
            self.get_logger().info(f'Service [{srv_name}] failed: {str(e)}')
        else:
            if not result.success:
                self.get_logger().warn(
                    f'Could not arm/disarm. Reason: {result.message}')

    async def arm_manipulator(self, state: bool):
        srv_name = self.resolve_service_name(
            self.manipulator_arming_client.srv_name)
        if not self.manipulator_arming_client.wait_for_service(timeout_sec=0.5):
            self.get_logger().error(f'Service [{srv_name}] not available.')
            return
        self.get_logger().info(f'Service [{srv_name}] is available.')

        request = SetBool.Request()
        request.data = state

        future = self.manipulator_arming_client.call_async(request)
        try:
            result: SetBool.Response = await asyncio.wait_for(future,
                                                              timeout=1.0)
        except Exception as e:
            self.get_logger().info(f'Service [{srv_name}] failed: {str(e)}')
        else:
            if not result.success:
                self.get_logger().warn(
                    f'Could not arm/disarm manipulator. Reason: {result.message}'
                )

    async def reboot_fcu(self):
        srv_name = self.resolve_service_name(self.reboot_client.srv_name)
        if not self.reboot_client.wait_for_service(timeout_sec=0.5):
            self.get_logger().error(f'Service [{srv_name}] not available.')
            return
        self.get_logger().info(f'Service [{srv_name}] is available.')
        request = Trigger.Request()
        future = self.reboot_client.call_async(request)
        try:
            result: Trigger.Response = await asyncio.wait_for(future,
                                                              timeout=1.0)
        except Exception as e:
            self.get_logger().info(f'Service [{srv_name}] failed: {str(e)}')
        else:
            if not result.success:
                self.get_logger().warn(
                    f'Could not reboot FCU. Reason: {result.message}')

    async def restart_ekf2(self):
        srv_name = self.resolve_service_name(self.restart_ekf2_client.srv_name)
        if not self.restart_ekf2_client.wait_for_service(timeout_sec=0.5):
            self.get_logger().error(f'Service [{srv_name}] not available.')
            return
        self.get_logger().info(f'Service [{srv_name}] is available.')
        request = Trigger.Request()
        future = self.restart_ekf2_client.call_async(request)
        try:
            result: Trigger.Response = await asyncio.wait_for(future,
                                                              timeout=1.0)
        except Exception as e:
            self.get_logger().info(f'Service [{srv_name}] failed: {str(e)}')
        else:
            if not result.success:
                self.get_logger().warn(
                    f'Could not restart ekf2. Reason: {result.message}')

    def on_button(self, msg: Button):
        asyncio.ensure_future(self.handle_button(msg))

    async def handle_button(self, msg: Button):
        if msg.button == self.ARM_BUTTON:
            self.get_logger().info('Trying to arm the vehicle.')
            await self.arm_vehicle(True)
            if self.use_manipulator:
                self.get_logger().info('Trying to arm the manipulator.')
                await self.arm_manipulator(True)
        elif msg.button == self.DISARM_BUTTON:
            self.get_logger().info('Trying to disarm the vehicle.')
            await self.arm_vehicle(False)
            if self.use_manipulator:
                self.get_logger().info('Trying to disarm the manipulator.')
                await self.arm_manipulator(False)
        elif msg.button == self.REBOOT_FCU_BUTTON:
            self.get_logger().info('Trying to reboot px4')
            await self.reboot_fcu()
        elif msg.button == self.RESTART_EKF2_BUTTON:
            self.get_logger().info('Trying to restart EKF2.')
            await self.restart_ekf2()
        else:
            self.get_logger().info(f'Unhandled button pressed: {msg.button}')

    def is_okay(self):
        return self._ok


async def spin(executor: SingleThreadedExecutor):
    while rclpy.ok():
        executor.spin_once()
        await asyncio.sleep(0)


def main(args=None):
    rclpy.init(args=args)
    node = ButtonHandlerNode('button_handler')
    if not node.is_okay():
        node.destroy_node()
        return
    executor = SingleThreadedExecutor()
    executor.add_node(node)
    loop = asyncio.get_event_loop()

    try:
        loop.run_until_complete(spin(executor))
    except KeyboardInterrupt:
        pass
    finally:
        node.destroy_node()


if __name__ == '__main__':
    main()
